# =====================================================================
#  CONFIGURACIÓN BASE  ─  Clona y personaliza para cada experimento
# =====================================================================
_base_: default.yaml

# ---------------------------------------------------------------------
# 1) EXPERIMENTO
# ---------------------------------------------------------------------
experiment:
  ## Nombre único y corto (carpetas, TensorBoard, etc.)
  name:        "ARQ_1__ESC_7"                   # p.ej. "exp_model1_b"

  ## Descripción legible (se muestra en logs)
  description: "ARQUITECTURA 1: CNN BILSTM ATTN => ESCENARIO 7"

  ## Módulo (.py) dentro de structure/models/
  model_module: "cnn_bilstm_attn"              

  ## Clase dentro del módulo (debe heredar de tu BaseTFModel)
  model_class:  "NN"                # Siempre debe ser "NN"

  ## Directorio raíz donde guardar salidas (se crea en runtime)
  output_root:  "outputs/ARQ_1"

  ## Subcarpeta específica de este experimento
  output_subdir: "ESC_7"              # p.ej. "model1_b"
  
  repeats: 10


# ---------------------------------------------------------------------
# 2) DATASET
# ---------------------------------------------------------------------
dataset:

  train_pct: 0.8  # Train/Val
  keys: {"X": "X", "Y": "Y", "Z": "Z"}
  
  kaggle:     
    train:
      dataset_id:  "carlosandres069/6mods-6clases-esc-7"   
      download_dir: "datasets/kaggle/ESC_7"           

    test:
      dataset_id:  "carlosandres069/6mods-6clases-esc-7-test"    
      download_dir: "datasets/kaggle/TEST_ESC_7"             

    file_pattern: "*.hdf5"    

  ## Nombres de clases (orden == índices)
  class_names:
    - "bpsk"
    - "qpsk"
    - "16qam"
    - "32qam cross"
    - "64qam"
    - "128qam cross"



# ---------------------------------------------------------------------
# 3) MODELO  (hiperparámetros del NN)
# ---------------------------------------------------------------------
model:
  params:
    seq_len:      4096 
    n_classes:    6         

    # CNN frontend
    conv_filters:      [64, 128, 128]   # tres bloques Conv1D
    conv_kernels:      [7, 5, 3]        # longitud de kernel por bloque
    conv_strides:      [2, 1, 1]        # stride por bloque
    pool_stride:       2                # MaxPooling1D al final del front-end

    # Recurrente
    bi_lstm_units:     256              # si quieres dos capas: [384, 256]

    # Attention
    atten_units:       128

    # Clasificador
    dense_units:       128              # capa densa posterior a atención
    dropout:           0.35             # prob. de apagado antes de softmax
    act_dense:         relu             # activación de la capa densa


# ---------------------------------------------------------------------
# 4) ENTRENAMIENTO
# ---------------------------------------------------------------------
training:
  batch_size:    32
  epochs:        150                  
  learning_rate: 1e-3
  patience:      10                  
  seed:          4207


# ---------------------------------------------------------------------
# 5) RUTAS AUXILIARES
# ---------------------------------------------------------------------
paths:
  logs_dir:        "logs"                 # TensorBoard y CSVLogger
  checkpoints_dir: "models/checkpoints"   # pesos .keras

# =====================================================================
#    FIN DEL TEMPLATE   –  Duplica → edita → corre tu experimento
# =====================================================================